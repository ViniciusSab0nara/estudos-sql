## Resumo do dia – SQL Prático e Revisão

- Reforcei os fundamentos do SQL revisando comandos essenciais como **SELECT**, **WHERE**, e **ORDER BY**.
- Pratiquei o uso de **CTE (WITH)** para organizar etapas intermediárias nas consultas.
- Utilizei **CASE WHEN** para classificação dinâmica de clientes por faixa de gasto.
- Implementei o uso de **UNION** para combinar conjuntos diferentes de dados em uma única consulta, aplicando valores literais no SELECT para rotular resultados.
- Aprofundei a lógica de construção de queries usando **apelidos de coluna (AS)**, valores literais e filtros (`WHERE`).

---

## Principais Queries da Semana

```sql
-- Classificação de clientes por total gasto usando CTE e CASE


WITH clientes_gasto AS (
    SELECT
        clientes.id_cliente,
        clientes.nome,
        SUM(itens_pedido.quantidade * itens_pedido.preco_unitario) as total_gasto
    FROM clientes
    JOIN pedidos ON pedidos.id_cliente = clientes.id_cliente
    JOIN itens_pedido ON itens_pedido.id_pedido = pedidos.id_pedido
    WHERE pedidos.status = 'Pago'
    GROUP BY clientes.id_cliente, clientes.nome
)
SELECT 
    nome,
    total_gasto,
    CASE
        WHEN total_gasto > 10000 THEN 'VIP'
        WHEN total_gasto BETWEEN 5000 AND 10000 THEN 'REGULAR'
        ELSE 'BASICO'
    END as status_cliente
FROM clientes_gasto
ORDER BY total_gasto DESC;




-- UNION: clientes com e sem pedido pago

SELECT 
    c.nome,
    c.cidade,
    'Com Pedido Pago' AS status_cliente
FROM clientes c
JOIN pedidos p ON p.id_cliente = c.id_cliente
WHERE p.status = 'Pago'

UNION

SELECT 
    c.nome,
    c.cidade,
    'Sem Pedido Pago' AS status_cliente
FROM clientes c
WHERE c.id_cliente NOT IN (
    SELECT p.id_cliente 
    FROM pedidos p
    WHERE p.status = 'Pago'
);


# O que estudei hoje em SQL

Hoje estudei os seguintes conceitos:

- UNION: Aprendi que serve para combinar o resultado de duas consultas SQL, eliminando as linhas duplicadas.

- UNION ALL: Similar ao UNION, mas mantém todas as linhas, incluindo duplicatas.

- LAG: Estudei essa função janela que permite acessar o valor da linha anterior dentro de um grupo específico (partição), facilitando comparações com o registro atual.

- LEAD: Função janela que permite acessar o valor da próxima linha dentro de uma partição, útil para comparações ou previsões futuras.

Com esses comandos, consigo manipular e analisar dados sequenciais de forma mais eficiente e criar consultas avançadas que consideram o contexto de linhas anteriores ou posteriores.




